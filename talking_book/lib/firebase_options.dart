// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['WEB_apiKey']!,
    appId: dotenv.env['WEB_appId']!,
    messagingSenderId: dotenv.env['WEB_messagingSenderId']!,
    projectId: dotenv.env['WEB_projectId']!,
    authDomain: dotenv.env['WEB_authDomain']!,
    storageBucket: dotenv.env['WEB_storageBucket']!,
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['Android_apiKey']!,
    appId: dotenv.env['Android_appId']!,
    messagingSenderId: dotenv.env['Android_messagingSenderId']!,
    projectId: dotenv.env['Android_projectId']!,
    storageBucket: dotenv.env['Android_storageBucket']!,
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['IOS_apiKey']!,
    appId: dotenv.env['IOS_appId']!,
    messagingSenderId: dotenv.env['IOS_messagingSenderId']!,
    projectId: dotenv.env['IOS_projectId']!,
    storageBucket: dotenv.env['IOS_storageBucket']!,
    iosBundleId: dotenv.env['IOS_iosBundleId']!,
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: dotenv.env['MacOS_FIREBASE_API_KEY']!,
    appId: dotenv.env['MacOS_FIREBASE_APP_ID']!,
    messagingSenderId: dotenv.env['MacOS_messagingSenderId']!,
    projectId: dotenv.env['MacOS_projectId']!,
    storageBucket: dotenv.env['MacOS_storageBucket']!,
    iosBundleId: dotenv.env['MacOS_iosBundleId']!,
  );
}
